// Think Tank Technologies Installation Scheduler - Organization Header Component

import React, { useState, useRef, useEffect } from 'react';
import { Building2, ChevronDown, Settings, Users, CreditCard, HelpCircle, LogOut, Plus } from 'lucide-react';
import { useOrganization, useTenant, useTenantPermissions } from '../../contexts/TenantProvider';
import { useAppStore } from '../../stores/useAppStore';

interface OrganizationHeaderProps {
  className?: string;
}

export const OrganizationHeader: React.FC<OrganizationHeaderProps> = ({ className = '' }) => {
  const organization = useOrganization();
  const { switchOrganization, isLoading } = useTenant();
  const { hasOrgPermission } = useTenantPermissions();
  const { setAuthenticated, setUser } = useAppStore();
  const [showOrgMenu, setShowOrgMenu] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);

  // Mock list of available organizations for switching
  const availableOrganizations = [
    {
      id: 'org-1',
      name: 'Think Tank Technologies',
      slug: 'think-tank-tech',
      logoUrl: '/thinktanklogo.png',
      isActive: true
    },
    {
      id: 'org-2',
      name: 'Demo Organization',
      slug: 'demo-org',
      logoUrl: '/thinktanklogo.png',
      isActive: false
    }
  ];

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setShowOrgMenu(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  const handleOrganizationSwitch = async (orgId: string) => {
    if (orgId !== organization?.id && !isLoading) {
      try {
        await switchOrganization(orgId);
        setShowOrgMenu(false);
      } catch (error) {
        console.error('Failed to switch organization:', error);
      }
    }
  };

  const handleSignOut = async () => {
    setAuthenticated(false);
    setUser(null);
    setShowOrgMenu(false);
  };

  if (!organization) {
    return (
      <div className={`bg-black/20 border-b border-white/10 ${className}`}>
        <div className="h-14 flex items-center justify-center px-6">
          <div className="animate-pulse text-white/60">Loading organization...</div>
        </div>
      </div>
    );
  }

  return (
    <div className={`bg-black/20 border-b border-white/10 backdrop-filter backdrop-blur-md ${className}`}>
      <div className="h-14 flex items-center justify-between px-6">
        {/* Organization Info and Switcher */}
        <div className="flex items-center space-x-4">
          <div className="relative" ref={dropdownRef}>
            <button
              onClick={() => setShowOrgMenu(!showOrgMenu)}
              className="flex items-center space-x-3 p-2 bg-white/5 border border-white/10 rounded-lg hover:bg-white/10 transition-all duration-200 group"
              disabled={isLoading}
            >
              {/* Organization Logo */}
              <div className="flex-shrink-0">
                <img 
                  src={organization.logoUrl || '/thinktanklogo.png'} 
                  alt={`${organization.name} Logo`}
                  className="h-8 w-8 rounded-md object-cover"
                />
              </div>
              
              {/* Organization Details */}
              <div className="hidden sm:block text-left">
                <div className="flex items-center space-x-2">
                  <h2 className="text-sm font-semibold text-white">{organization.name}</h2>
                  <span className="px-1.5 py-0.5 bg-green-500/20 text-green-300 text-xs rounded-full border border-green-500/20">
                    {organization.subscription.plan}
                  </span>
                </div>
                <p className="text-xs text-white/60">
                  {organization.memberCount} members â€¢ {organization.projectCount} projects
                </p>
              </div>

              <ChevronDown className={`h-4 w-4 text-white/70 transition-transform duration-200 ${showOrgMenu ? 'rotate-180' : ''} ${isLoading ? 'animate-spin' : ''}`} />
            </button>

            {/* Organization Dropdown Menu */}
            {showOrgMenu && (
              <div className="absolute top-full left-0 mt-2 w-80 bg-black/90 backdrop-filter backdrop-blur-md border border-white/20 rounded-lg shadow-xl z-50">
                {/* Current Organization Section */}
                <div className="p-4 border-b border-white/10">
                  <div className="flex items-center space-x-3">
                    <img 
                      src={organization.logoUrl || '/thinktanklogo.png'} 
                      alt={organization.name}
                      className="h-10 w-10 rounded-lg object-cover"
                    />
                    <div className="flex-1 min-w-0">
                      <h3 className="text-sm font-semibold text-white truncate">{organization.name}</h3>
                      <p className="text-xs text-white/60">{organization.contact.email}</p>
                    </div>
                  </div>
                </div>

                {/* Organization Actions */}
                <div className="py-2">
                  {hasOrgPermission('manage_organization') && (
                    <button className="w-full px-4 py-2 text-left text-sm text-white/90 hover:bg-white/10 transition-colors flex items-center space-x-2">
                      <Settings className="h-4 w-4" />
                      <span>Organization Settings</span>
                    </button>
                  )}
                  
                  {hasOrgPermission('manage_members') && (
                    <button className="w-full px-4 py-2 text-left text-sm text-white/90 hover:bg-white/10 transition-colors flex items-center space-x-2">
                      <Users className="h-4 w-4" />
                      <span>Manage Members</span>
                    </button>
                  )}
                  
                  {hasOrgPermission('manage_billing') && (
                    <button className="w-full px-4 py-2 text-left text-sm text-white/90 hover:bg-white/10 transition-colors flex items-center space-x-2">
                      <CreditCard className="h-4 w-4" />
                      <span>Billing & Subscription</span>
                    </button>
                  )}
                </div>

                {/* Switch Organization Section */}
                {availableOrganizations.length > 1 && (
                  <>
                    <div className="border-t border-white/10 py-2">
                      <div className="px-4 py-2">
                        <h4 className="text-xs font-semibold text-white/70 uppercase tracking-wide">Switch Organization</h4>
                      </div>
                      {availableOrganizations.map((org) => (
                        <button
                          key={org.id}
                          onClick={() => handleOrganizationSwitch(org.id)}
                          className={`w-full px-4 py-2 text-left text-sm hover:bg-white/10 transition-colors flex items-center space-x-2 ${
                            org.id === organization.id ? 'bg-white/5 text-white' : 'text-white/80'
                          }`}
                          disabled={org.id === organization.id || isLoading}
                        >
                          <img 
                            src={org.logoUrl} 
                            alt={org.name}
                            className="h-6 w-6 rounded object-cover"
                          />
                          <span className="flex-1">{org.name}</span>
                          {org.id === organization.id && (
                            <div className="h-2 w-2 bg-green-400 rounded-full"></div>
                          )}
                        </button>
                      ))}
                    </div>

                    {/* Create New Organization */}
                    <div className="border-t border-white/10 py-2">
                      <button className="w-full px-4 py-2 text-left text-sm text-white/80 hover:bg-white/10 transition-colors flex items-center space-x-2">
                        <Plus className="h-4 w-4" />
                        <span>Create New Organization</span>
                      </button>
                    </div>
                  </>
                )}

                {/* Footer Actions */}
                <div className="border-t border-white/10 py-2">
                  <button className="w-full px-4 py-2 text-left text-sm text-white/80 hover:bg-white/10 transition-colors flex items-center space-x-2">
                    <HelpCircle className="h-4 w-4" />
                    <span>Help & Support</span>
                  </button>
                  
                  <button
                    onClick={handleSignOut}
                    className="w-full px-4 py-2 text-left text-sm text-red-400 hover:bg-white/10 transition-colors flex items-center space-x-2"
                  >
                    <LogOut className="h-4 w-4" />
                    <span>Sign Out</span>
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Subscription Status */}
        <div className="hidden lg:flex items-center space-x-4">
          <div className="flex items-center space-x-2 text-sm">
            <span className="text-white/60">Subscription:</span>
            <span className={`px-2 py-1 rounded-full text-xs capitalize ${
              organization.subscription.status === 'active'
                ? 'bg-green-500/20 text-green-300 border border-green-500/20'
                : 'bg-yellow-500/20 text-yellow-300 border border-yellow-500/20'
            }`}>
              {organization.subscription.plan}
            </span>
          </div>
          
          <div className="w-px h-6 bg-white/10"></div>
          
          <div className="text-sm text-white/60">
            {organization.subscription.maxUsers - organization.memberCount} seats available
          </div>
        </div>
      </div>
    </div>
  );
};

export default OrganizationHeader;