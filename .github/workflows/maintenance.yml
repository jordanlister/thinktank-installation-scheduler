name: Maintenance & Security

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  # Dependency Updates
  dependency-updates:
    name: Check Dependency Updates
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Check for outdated dependencies
        run: |
          npm outdated --json > outdated-deps.json || true
          if [ -s outdated-deps.json ]; then
            echo "UPDATES_AVAILABLE=true" >> $GITHUB_ENV
          else
            echo "UPDATES_AVAILABLE=false" >> $GITHUB_ENV
          fi

      - name: Create dependency update issue
        if: env.UPDATES_AVAILABLE == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const outdated = JSON.parse(fs.readFileSync('outdated-deps.json', 'utf8'));
            
            let issueBody = '## 📦 Dependency Updates Available\n\n';
            issueBody += 'The following dependencies have updates available:\n\n';
            issueBody += '| Package | Current | Latest | Type |\n';
            issueBody += '|---------|---------|--------|---------|\n';
            
            for (const [pkg, info] of Object.entries(outdated)) {
              const type = info.type || 'dependency';
              issueBody += `| ${pkg} | ${info.current} | ${info.latest} | ${type} |\n`;
            }
            
            issueBody += '\n**Recommendations:**\n';
            issueBody += '- Review each update for breaking changes\n';
            issueBody += '- Test thoroughly in development environment\n';
            issueBody += '- Consider updating in small batches\n';
            issueBody += '- Check for security vulnerabilities in current versions\n';
            
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'dependencies',
              state: 'open'
            });
            
            if (issues.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '📦 Dependency Updates Available',
                body: issueBody,
                labels: ['dependencies', 'maintenance']
              });
            }

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run security audit
        run: |
          npm audit --audit-level moderate --json > audit-results.json || true
          if [ -s audit-results.json ]; then
            echo "VULNERABILITIES_FOUND=true" >> $GITHUB_ENV
          else
            echo "VULNERABILITIES_FOUND=false" >> $GITHUB_ENV
          fi

      - name: Generate security report
        if: env.VULNERABILITIES_FOUND == 'true'
        run: |
          echo "# Security Audit Report" > security-report.md
          echo "" >> security-report.md
          echo "Generated on: $(date)" >> security-report.md
          echo "" >> security-report.md
          npm audit --audit-level moderate >> security-report.md

      - name: Upload security report
        if: env.VULNERABILITIES_FOUND == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: |
            audit-results.json
            security-report.md
          retention-days: 30

      - name: Create security issue
        if: env.VULNERABILITIES_FOUND == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const auditResults = JSON.parse(fs.readFileSync('audit-results.json', 'utf8'));
            
            let issueBody = '## 🚨 Security Vulnerabilities Detected\n\n';
            issueBody += `**Audit Summary:**\n`;
            issueBody += `- Total vulnerabilities: ${auditResults.metadata?.vulnerabilities?.total || 0}\n`;
            issueBody += `- Critical: ${auditResults.metadata?.vulnerabilities?.critical || 0}\n`;
            issueBody += `- High: ${auditResults.metadata?.vulnerabilities?.high || 0}\n`;
            issueBody += `- Moderate: ${auditResults.metadata?.vulnerabilities?.moderate || 0}\n`;
            issueBody += `- Low: ${auditResults.metadata?.vulnerabilities?.low || 0}\n\n`;
            
            issueBody += '**Action Required:**\n';
            issueBody += '1. Review the security audit report\n';
            issueBody += '2. Update vulnerable dependencies\n';
            issueBody += '3. Test updated dependencies thoroughly\n';
            issueBody += '4. Deploy fixes as soon as possible\n\n';
            
            issueBody += '**Resources:**\n';
            issueBody += '- Run `npm audit fix` to automatically fix issues\n';
            issueBody += '- Check the uploaded security report for details\n';
            
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'security',
              state: 'open'
            });
            
            if (issues.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '🚨 Security Vulnerabilities Detected',
                body: issueBody,
                labels: ['security', 'urgent']
              });
            }

  # Bundle Analysis
  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build application
        run: npm run build

      - name: Analyze bundle size
        run: npm run analyze

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: |
            bundle-analyzer-report.html
            build-stats.json
          retention-days: 30

      - name: Check bundle size limits
        run: |
          # Check if any chunk exceeds size limits
          if [ -f build-stats.json ]; then
            node -e "
              const stats = require('./build-stats.json');
              const chunks = stats.chunks || [];
              const oversized = chunks.filter(chunk => chunk.size > 500000); // 500KB limit
              if (oversized.length > 0) {
                console.log('⚠️ Large chunks detected:', oversized.map(c => c.name));
                process.exit(1);
              }
              console.log('✅ All chunks within size limits');
            "
          fi

  # Performance Monitoring
  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build application
        run: npm run build

      - name: Start preview server
        run: npm run preview &
        env:
          PORT: 4173

      - name: Wait for server
        run: npx wait-on http://localhost:4173

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:4173
            http://localhost:4173/dashboard
            http://localhost:4173/schedules
          configPath: './lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: |
            .lighthouseci/
          retention-days: 30